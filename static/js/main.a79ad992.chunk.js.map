{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","props","todo","completed","padding","borderBottom","textDecoration","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","React","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a79ad992.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { NONAME } from \"dns\";\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      background: this.props.todo.completed ? \"#e1e1e1\" : \"#f4f4f4\",\r\n      padding: \"20px\",\r\n      borderBottom: \"1px #000 solid\",\r\n      textDecoration: this.props.todo.completed ? \"line-through\" : \"none\"\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n          />\r\n          {title}\r\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>\r\n            x\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n};\r\n\r\nconst btnStyle = {\r\n  background: \"#ff0000\",\r\n  color: \"#fff\",\r\n  border: \"none\",\r\n  padding: \"5px 9px\",\r\n  borderRadius: \"50%\",\r\n  cursor: \"pointer\",\r\n  float: \"right\"\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends React.Component {\r\n\r\n  render() {\r\n    return this.props.todos.map(todo => (\r\n      <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo = {this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style = {headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link style = {linkStyle} to=\"/\">Home</Link> | <Link style = {linkStyle} to = \"/About\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#87CEEB',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '20px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: \"#fff\"\r\n}\r\n\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: \"\"\r\n  };\r\n\r\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n        <input\r\n          style={{ flex: \"10\", padding: \"10px\" }}\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo ...\"\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          className=\"btn\"\r\n          style={{ flex: \"1\" }}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default AddTodo;\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the TodoList app v1.0.0, made using the video guide created by Traversy Media.</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Todos from \"./components/Todos\";\r\nimport Header from \"./components/layout/Header\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport About from \"./components/pages/About\";\r\n//import uuid from \"uuid\";\r\n\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    todos: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then(res => this.setState({todos: res.data}))\r\n  }\r\n\r\n  //Toggle Complete\r\n  markComplete = id => {\r\n    this.setState({\r\n      todos: this.state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  };\r\n\r\n  //Delete Todo\r\n\r\n  delTodo = id => {\r\n    axios.delete('https://jsonplaceholder.typicode.com/todos/${id}').then(res => this.setState({\r\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\r\n    }));\r\n  };\r\n\r\n  //Add Todo\r\n\r\n  addTodo = title => {\r\n    axios.post('https://jsonplaceholder.typicode.com/todos', { title: title, completed: false }).then(res => this.setState({ todos: [...this.state.todos, res.data] }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n            <Header />\r\n            <Route exact\r\n              path=\"/\"\r\n              render={props => (\r\n                <React.Fragment>\r\n                  <AddTodo addTodo={this.addTodo} />\r\n                  <Todos\r\n                    todos={this.state.todos}\r\n                    markComplete={this.markComplete}\r\n                    delTodo={this.delTodo}\r\n                  />\r\n                </React.Fragment>\r\n              )}\r\n            />\r\n            <Route path=\"/about\" component={About} />\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}